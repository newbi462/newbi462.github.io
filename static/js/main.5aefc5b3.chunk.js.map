{"version":3,"sources":["BottomRow.js","App.js","serviceWorker.js","index.js"],"names":["BottomRow","propStatetoDisplay","className","yard","q","App","useState","lionsScore","setLionsScore","tigersScore","setTigersScore","scorePoints","team","cb","score","quarterCount","setQuarterCount","quarterTimeSec","setQuarterTimeSec","quarterTimeMin","setQuarterTimeMin","setTimeout","ballOn","passBottomProps","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RA0BeA,G,KAvBG,SAAC,GAA6B,IAA1BC,EAAyB,EAAzBA,mBACpB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,QACA,yBAAKA,UAAU,eAAf,MAEF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,SACA,yBAAKA,UAAU,eAAf,MAEF,yBAAKA,UAAU,UACb,wBAAIA,UAAU,iBAAd,WACA,yBAAKA,UAAU,iBAAiBD,EAAmBE,OAErD,yBAAKD,UAAU,WACb,wBAAIA,UAAU,kBAAd,WACA,yBAAKA,UAAU,kBAAkBD,EAAmBG,OCqG7CC,MAzGf,WAAe,MAEuBC,mBAAS,GAFhC,mBAENC,EAFM,KAEMC,EAFN,OAWyBF,mBAAS,GAXlC,mBAWNG,EAXM,KAWOC,EAXP,KAoBTC,EAAc,SAACC,EAAKC,EAAGC,GACzBD,EAAGD,EAAOE,IArBC,EA2B2BR,mBAAS,GA3BpC,mBA2BNS,EA3BM,KA2BQC,EA3BR,OA4B+BV,mBAAS,IA5BxC,mBA4BNW,EA5BM,KA4BUC,EA5BV,OA6B+BZ,mBAAS,GA7BxC,mBA6BNa,EA7BM,KA6BUC,EA7BV,KA8BbC,YAAW,WACTH,EAAkBD,EAAiB,GACZ,IAAnBA,IACFG,EAAkBD,EAAiB,GACnCD,EAAkB,KAEG,IAAnBC,GAA2C,IAAnBF,GAAwBF,EAAe,IACjEK,EAAkB,IAClBF,EAAkB,IAClBF,EAAgBD,EAAe,MAEhC,KAzCU,MA4DeT,mBAAS,IA5DxB,mBA4DNgB,EA5DM,KA8DTC,GA9DS,KA8DS,CACpBpB,KAAMmB,EACNlB,EAAGW,IAML,OACE,yBAAKb,UAAU,aACb,6BAASA,UAAU,cACjB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,cAAd,SAIA,yBAAKA,UAAU,eAAeK,GALhC,YAOA,yBAAKL,UAAU,SAASiB,EAAxB,IAAyCF,GACzC,yBAAKf,UAAU,QACb,wBAAIA,UAAU,cAAd,UACA,yBAAKA,UAAU,eAAeO,KAGlC,kBAAC,EAAD,CAAWR,mBAAoBsB,KAEjC,6BAASrB,UAAU,WACjB,yBAAKA,UAAU,eAEb,4BAAQsB,QAAS,kBAAMb,EAAYJ,EAAWC,EAAc,IAAIN,UAAU,0BAA1E,kBACA,4BAAQsB,QAAS,kBAAMb,EAAYJ,EAAWC,EAAc,IAAIN,UAAU,0BAA1E,oBAEF,yBAAKA,UAAU,eACb,4BAAQsB,QAAS,kBAAMb,EAAYF,EAAYC,EAAe,IAAIR,UAAU,0BAA5E,kBACA,4BAAQsB,QAAS,kBAAMb,EAAYF,EAAYC,EAAe,IAAIR,UAAU,0BAA5E,uBCrGUuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5aefc5b3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst BottomRow = (  {propStatetoDisplay} ) => {\n  return (\n    <div className=\"bottomRow\">\n      <div className=\"down\">\n        <h3 className=\"down__title\">Down</h3>\n        <div className=\"down__value\">3</div>\n      </div>\n      <div className=\"toGo\">\n        <h3 className=\"toGo__title\">To Go</h3>\n        <div className=\"toGo__value\">7</div>\n      </div>\n      <div className=\"ballOn\">\n        <h3 className=\"ballOn__title\">Ball on</h3>\n        <div className=\"ballOn__value\">{propStatetoDisplay.yard}</div>\n      </div>\n      <div className=\"quarter\">\n        <h3 className=\"quarter__title\">Quarter</h3>\n        <div className=\"quarter__value\">{propStatetoDisplay.q}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default BottomRow;\n","//TODO: STEP 1 - Import the useState hook.\nimport React, { useState } from \"react\"; // to use \"useState();\"\" must add \", { useState }\"\nimport \"./App.css\";\nimport BottomRow from \"./BottomRow\";\n\n\n// Lions Score\n//let lionsScore = 32;\n\n// Tigers Score\n//let tigersScore = 32;\n\n// Touch down = +7\n// Field Goal = +3\n\n\nfunction App() {\n  //TODO: STEP 2 - Establish your applictaion's state with some useState hooks.  You'll need one for the home score and another for the away score.\n  const [lionsScore, setLionsScore] = useState(0); // Give these better names, and decide whether you want to pass an initial score into the state hook as the initialValue\n/*  const scoreTouchdownLions = () => {\n    setLionsScore(lionsScore + 7);\n  };\n  const scoreGoalLions = () => {\n    setLionsScore(lionsScore + 3);\n  };*/\n\n\n  const [tigersScore, setTigersScore] = useState(0);\n/*  const scoreTouchdownTigers = () => {\n    setTigersScore(tigersScore + 7);\n  };\n  const scoreGoalTigers = () => {\n    setTigersScore(tigersScore + 3);\n  };*/\n\n\n  let scorePoints = (team,cb,score) => {\n    cb(team + score);\n  };\n\n  //If I try and do a paramiter based I get \"Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.\"*/\n  // ok I am just dumb had them in the wrong order :( x,y,z, != y,x,z\n\n  const [quarterCount, setQuarterCount] = useState(1);\n  const [quarterTimeSec, setQuarterTimeSec] = useState(59);\n  const [quarterTimeMin, setQuarterTimeMin] = useState(0);\n  setTimeout(() => {\n    setQuarterTimeSec(quarterTimeSec - 1);\n    if (quarterTimeSec === 0) {\n      setQuarterTimeMin(quarterTimeMin - 1);\n      setQuarterTimeSec(59);\n    }\n    if (quarterTimeMin === 0 && quarterTimeSec === 0 && quarterCount < 4) {\n      setQuarterTimeMin(14);\n      setQuarterTimeSec(59);\n      setQuarterCount(quarterCount + 1)// would still need half time logic;\n    }\n  }, 1000)\n\n/* TL VER https://upmostly.com/tutorials/settimeout-in-react-components-using-hooks\nconst [ seconds, setSeconds ] = useState(60);\nuseEffect(\n    () => {\n        const timer = setTimeout(() => {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            } else {\n                clearTimeout(timer);// this is an error clear\n            }\n        }, 1000);\n    },\n    [ seconds ]\n);\n\n*/\n\n  const [ballOn, setBallOn] = useState(10);\n\n  let passBottomProps = {\n    yard: ballOn,\n    q: quarterCount\n  };\n\n\n\n\n  return (\n    <div className=\"container\">\n      <section className=\"scoreboard\">\n        <div className=\"topRow\">\n          <div className=\"home\">\n            <h2 className=\"home__name\">Lions</h2>\n\n            {/* TODO STEP 3 - We need to change the hardcoded values in these divs to accept dynamic values from our state. */}\n\n            <div className=\"home__score\">{lionsScore}</div>//was 32\n          </div>\n          <div className=\"timer\">{quarterTimeMin}:{quarterTimeSec}</div>\n          <div className=\"away\">\n            <h2 className=\"away__name\">Tigers</h2>\n            <div className=\"away__score\">{tigersScore}</div>\n          </div>\n        </div>\n        <BottomRow propStatetoDisplay={passBottomProps} />\n      </section>\n      <section className=\"buttons\">\n        <div className=\"homeButtons\">\n          {/* TODO STEP 4 - Now we need to attach our state setter functions to click listeners. */}\n          <button onClick={() => scorePoints(lionsScore,setLionsScore,7)} className=\"homeButtons__touchdown\">Home Touchdown</button>\n          <button onClick={() => scorePoints(lionsScore,setLionsScore,3)} className=\"homeButtons__fieldGoal\">Home Field Goal</button>\n        </div>\n        <div className=\"awayButtons\">\n          <button onClick={() => scorePoints(tigersScore,setTigersScore,7)} className=\"awayButtons__touchdown\">Away Touchdown</button>\n          <button onClick={() => scorePoints(tigersScore,setTigersScore,3)} className=\"awayButtons__fieldGoal\">Away Field Goal</button>\n        {/*MUST CALL AS ANOYMUS FUNTION TO PREVENT LOOP*/}\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}